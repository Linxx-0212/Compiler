
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Apr 26 20:19:51 EDT 2019
//----------------------------------------------------

package mjparser;

import java_cup.runtime.*;
import java.util.*;
import java.io.PrintWriter;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileNotFoundException;
import ast.node.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Apr 26 20:19:51 EDT 2019
  */
public class mj extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public mj() {super();}

  /** Constructor which sets the default scanner. */
  public mj(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public mj(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\002\004\000\002\002\007\000\002\017" +
    "\002\000\002\020\002\000\002\021\002\000\002\006\024" +
    "\000\002\004\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\005\004\000\002\005\002" +
    "\000\002\003\003\000\002\003\013\000\002\003\007\000" +
    "\002\003\011\000\002\003\007\000\002\003\011\000\002" +
    "\003\011\000\002\003\007\000\002\003\007\000\002\003" +
    "\006\000\002\003\011\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\014\004\000\002\014\006\000\002" +
    "\014\005\000\002\014\010\000\002\014\010\000\002\014" +
    "\006\000\002\014\006\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\007\000\002\014\007\000\002\014\006\000\002\014" +
    "\004\000\002\014\005\000\002\011\003\000\002\011\005" +
    "\000\002\011\005\000\002\011\002\000\002\010\006\000" +
    "\002\010\002\000\002\007\016\000\002\007\002\000\002" +
    "\012\004\000\002\012\006\000\002\012\002\000\002\015" +
    "\005\000\002\015\002\000\002\016\011\000\002\016\002" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\304\000\004\017\005\001\002\000\004\002\306\001" +
    "\002\000\004\046\006\001\002\000\004\044\007\001\002" +
    "\000\004\037\010\001\002\000\004\061\265\001\002\000" +
    "\006\002\uffbb\037\uffbb\001\002\000\006\002\000\037\013" +
    "\001\002\000\004\061\014\001\002\000\004\011\015\001" +
    "\002\000\026\012\uffc4\013\uffc4\014\uffc4\015\uffc4\032\uffc4" +
    "\036\uffc4\047\uffc4\050\uffc4\051\uffc4\061\uffc4\001\002\000" +
    "\026\012\uffc2\013\020\014\017\015\030\032\uffc2\036\021" +
    "\047\026\050\024\051\023\061\025\001\002\000\010\016" +
    "\ufff6\041\263\061\ufff6\001\002\000\006\016\ufff8\061\ufff8" +
    "\001\002\000\006\016\ufff5\061\ufff5\001\002\000\006\012" +
    "\035\032\036\001\002\000\006\016\ufff2\061\ufff2\001\002" +
    "\000\006\016\ufff3\061\ufff3\001\002\000\006\016\ufff1\061" +
    "\ufff1\001\002\000\010\016\ufff4\041\033\061\ufff4\001\002" +
    "\000\004\061\031\001\002\000\006\016\ufff7\061\ufff7\001" +
    "\002\000\004\044\032\001\002\000\100\005\uffc5\007\uffc5" +
    "\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\020\uffc5\025" +
    "\uffc5\026\uffc5\031\uffc5\032\uffc5\033\uffc5\036\uffc5\047\uffc5" +
    "\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5\056" +
    "\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5\063\uffc5\064\uffc5" +
    "\065\uffc5\066\uffc5\067\uffc5\001\002\000\004\042\034\001" +
    "\002\000\006\016\ufffa\061\ufffa\001\002\000\006\002\uffbc" +
    "\037\uffbc\001\002\000\022\013\020\014\017\015\030\036" +
    "\021\047\026\050\024\051\023\061\025\001\002\000\004" +
    "\061\040\001\002\000\004\007\041\001\002\000\026\010" +
    "\uffbf\013\020\014\017\015\030\027\uffbf\036\021\047\026" +
    "\050\024\051\023\061\025\001\002\000\004\061\262\001" +
    "\002\000\006\010\045\027\044\001\002\000\022\013\020" +
    "\014\017\015\030\036\021\047\026\050\024\051\023\061" +
    "\025\001\002\000\004\011\046\001\002\000\076\005\uffc4" +
    "\007\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4\020" +
    "\uffc4\025\uffc4\026\uffc4\031\uffc4\033\uffc4\036\uffc4\047\uffc4" +
    "\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4\056" +
    "\uffc4\057\uffc4\060\uffc4\061\uffc4\062\uffc4\063\uffc4\064\uffc4" +
    "\065\uffc4\066\uffc4\067\uffc4\001\002\000\076\005\072\007" +
    "\060\011\061\012\uffef\013\020\014\017\015\030\020\056" +
    "\025\054\026\052\031\076\033\uffef\036\021\047\026\050" +
    "\024\051\023\052\065\053\053\054\050\055\077\056\100" +
    "\057\071\060\064\061\062\062\055\063\073\064\066\065" +
    "\074\066\057\067\063\001\002\000\004\007\252\001\002" +
    "\000\060\005\072\007\060\011\061\012\uffef\020\056\025" +
    "\054\026\052\031\076\033\uffef\052\065\053\053\054\050" +
    "\055\077\056\100\057\071\060\064\061\226\062\055\063" +
    "\073\064\066\065\074\066\057\067\063\001\002\000\004" +
    "\007\245\001\002\000\004\007\241\001\002\000\036\005" +
    "\072\007\060\025\054\031\076\056\100\057\071\060\064" +
    "\061\102\062\055\063\073\064\066\065\074\066\057\067" +
    "\063\001\002\000\032\004\uffd2\005\uffd2\006\uffd2\010\uffd2" +
    "\022\uffd2\023\uffd2\024\uffd2\027\uffd2\030\uffd2\041\uffd2\042" +
    "\uffd2\044\uffd2\001\002\000\004\007\232\001\002\000\032" +
    "\004\uffd3\005\uffd3\006\uffd3\010\uffd3\022\uffd3\023\uffd3\024" +
    "\uffd3\027\uffd3\030\uffd3\041\uffd3\042\uffd3\044\uffd3\001\002" +
    "\000\040\005\072\007\060\015\133\025\054\031\076\056" +
    "\100\057\071\060\064\061\102\062\055\063\073\064\066" +
    "\065\074\066\057\067\063\001\002\000\056\005\072\007" +
    "\060\011\061\012\uffef\020\056\025\054\026\052\031\076" +
    "\052\065\053\053\054\050\055\077\056\100\057\071\060" +
    "\064\061\226\062\055\063\073\064\066\065\074\066\057" +
    "\067\063\001\002\000\026\004\uffd0\005\uffd0\006\uffd0\022" +
    "\uffd0\023\uffd0\024\uffd0\030\uffd0\041\215\045\216\061\ufff1" +
    "\001\002\000\032\004\uffcf\005\uffcf\006\uffcf\010\uffcf\022" +
    "\uffcf\023\uffcf\024\uffcf\027\uffcf\030\uffcf\041\uffcf\042\uffcf" +
    "\044\uffcf\001\002\000\032\004\uffd6\005\uffd6\006\uffd6\010" +
    "\uffd6\022\uffd6\023\uffd6\024\uffd6\027\uffd6\030\uffd6\041\uffd6" +
    "\042\uffd6\044\uffd6\001\002\000\004\007\205\001\002\000" +
    "\032\004\uffd5\005\uffd5\006\uffd5\010\uffd5\022\uffd5\023\uffd5" +
    "\024\uffd5\027\uffd5\030\uffd5\041\uffd5\042\uffd5\044\uffd5\001" +
    "\002\000\006\012\uffbd\033\201\001\002\000\022\004\107" +
    "\005\104\006\112\022\114\023\106\024\105\030\172\041" +
    "\113\001\002\000\004\007\167\001\002\000\036\005\072" +
    "\007\060\025\054\031\076\056\100\057\071\060\064\061" +
    "\102\062\055\063\073\064\066\065\074\066\057\067\063" +
    "\001\002\000\032\004\uffd1\005\uffd1\006\uffd1\010\uffd1\022" +
    "\uffd1\023\uffd1\024\uffd1\027\uffd1\030\uffd1\041\uffd1\042\uffd1" +
    "\044\uffd1\001\002\000\032\004\uffd4\005\uffd4\006\uffd4\010" +
    "\uffd4\022\uffd4\023\uffd4\024\uffd4\027\uffd4\030\uffd4\041\uffd4" +
    "\042\uffd4\044\uffd4\001\002\000\062\005\uffee\007\uffee\011" +
    "\uffee\012\uffee\020\uffee\021\uffee\025\uffee\026\uffee\031\uffee" +
    "\033\uffee\052\uffee\053\uffee\054\uffee\055\uffee\056\uffee\057" +
    "\uffee\060\uffee\061\uffee\062\uffee\063\uffee\064\uffee\065\uffee" +
    "\066\uffee\067\uffee\001\002\000\010\014\155\047\154\061" +
    "\153\001\002\000\004\007\147\001\002\000\004\007\101" +
    "\001\002\000\036\005\072\007\060\025\054\031\076\056" +
    "\100\057\071\060\064\061\102\062\055\063\073\064\066" +
    "\065\074\066\057\067\063\001\002\000\032\004\uffd0\005" +
    "\uffd0\006\uffd0\010\uffd0\022\uffd0\023\uffd0\024\uffd0\027\uffd0" +
    "\030\uffd0\041\uffd0\042\uffd0\044\uffd0\001\002\000\024\004" +
    "\107\005\104\006\112\022\114\023\106\024\105\027\111" +
    "\030\110\041\113\001\002\000\036\005\072\007\060\025" +
    "\054\031\076\056\100\057\071\060\064\061\102\062\055" +
    "\063\073\064\066\065\074\066\057\067\063\001\002\000" +
    "\036\005\072\007\060\025\054\031\076\056\100\057\071" +
    "\060\064\061\102\062\055\063\073\064\066\065\074\066" +
    "\057\067\063\001\002\000\036\005\072\007\060\025\054" +
    "\031\076\056\100\057\071\060\064\061\102\062\055\063" +
    "\073\064\066\065\074\066\057\067\063\001\002\000\036" +
    "\005\072\007\060\025\054\031\076\056\100\057\071\060" +
    "\064\061\102\062\055\063\073\064\066\065\074\066\057" +
    "\067\063\001\002\000\006\043\124\061\123\001\002\000" +
    "\036\005\072\007\060\025\054\031\076\056\100\057\071" +
    "\060\064\061\102\062\055\063\073\064\066\065\074\066" +
    "\057\067\063\001\002\000\036\005\072\007\060\025\054" +
    "\031\076\056\100\057\071\060\064\061\102\062\055\063" +
    "\073\064\066\065\074\066\057\067\063\001\002\000\036" +
    "\005\072\007\060\025\054\031\076\056\100\057\071\060" +
    "\064\061\102\062\055\063\073\064\066\065\074\066\057" +
    "\067\063\001\002\000\036\005\072\007\060\025\054\031" +
    "\076\056\100\057\071\060\064\061\102\062\055\063\073" +
    "\064\066\065\074\066\057\067\063\001\002\000\030\004" +
    "\107\005\104\006\112\010\uffe2\023\uffe2\024\uffe2\027\uffe2" +
    "\030\110\041\113\042\uffe2\044\uffe2\001\002\000\024\004" +
    "\107\005\104\006\112\022\114\023\106\024\105\030\110" +
    "\041\113\042\117\001\002\000\032\004\uffdc\005\uffdc\006" +
    "\uffdc\010\uffdc\022\uffdc\023\uffdc\024\uffdc\027\uffdc\030\uffdc" +
    "\041\uffdc\042\uffdc\044\uffdc\001\002\000\032\004\uffde\005" +
    "\uffde\006\uffde\010\uffde\022\uffde\023\uffde\024\uffde\027\uffde" +
    "\030\110\041\113\042\uffde\044\uffde\001\002\000\024\004" +
    "\107\005\104\006\112\010\122\022\114\023\106\024\105" +
    "\030\110\041\113\001\002\000\032\004\uffd9\005\uffd9\006" +
    "\uffd9\010\uffd9\022\uffd9\023\uffd9\024\uffd9\027\uffd9\030\uffd9" +
    "\041\uffd9\042\uffd9\044\uffd9\001\002\000\004\007\125\001" +
    "\002\000\032\004\uffdb\005\uffdb\006\uffdb\010\uffdb\022\uffdb" +
    "\023\uffdb\024\uffdb\027\uffdb\030\uffdb\041\uffdb\042\uffdb\044" +
    "\uffdb\001\002\000\042\005\072\007\130\010\uffc6\025\054" +
    "\027\uffc6\031\076\056\100\057\071\060\064\061\102\062" +
    "\055\063\073\064\066\065\074\066\057\067\063\001\002" +
    "\000\006\010\142\027\137\001\002\000\026\004\107\005" +
    "\104\006\112\010\uffc9\022\114\023\106\024\105\027\uffc9" +
    "\030\110\041\113\001\002\000\044\005\072\007\130\010" +
    "\uffc6\015\133\025\054\027\uffc6\031\076\056\100\057\071" +
    "\060\064\061\102\062\055\063\073\064\066\065\074\066" +
    "\057\067\063\001\002\000\006\010\140\027\137\001\002" +
    "\000\026\004\107\005\104\006\112\010\136\022\114\023" +
    "\106\024\105\027\uffc9\030\110\041\113\001\002\000\004" +
    "\010\134\001\002\000\036\005\072\007\060\025\054\031" +
    "\076\056\100\057\071\060\064\061\102\062\055\063\073" +
    "\064\066\065\074\066\057\067\063\001\002\000\032\004" +
    "\uffd7\005\uffd7\006\uffd7\010\uffd7\022\uffd7\023\uffd7\024\uffd7" +
    "\027\uffd7\030\110\041\uffd7\042\uffd7\044\uffd7\001\002\000" +
    "\032\004\uffca\005\uffca\006\uffca\010\uffca\022\uffca\023\uffca" +
    "\024\uffca\027\uffca\030\uffca\041\uffca\042\uffca\044\uffca\001" +
    "\002\000\036\005\072\007\060\025\054\031\076\056\100" +
    "\057\071\060\064\061\102\062\055\063\073\064\066\065" +
    "\074\066\057\067\063\001\002\000\006\010\uffc7\027\uffc7" +
    "\001\002\000\026\004\107\005\104\006\112\010\uffc8\022" +
    "\114\023\106\024\105\027\uffc8\030\110\041\113\001\002" +
    "\000\032\004\uffda\005\uffda\006\uffda\010\uffda\022\uffda\023" +
    "\uffda\024\uffda\027\uffda\030\uffda\041\uffda\042\uffda\044\uffda" +
    "\001\002\000\032\004\uffe0\005\uffe0\006\112\010\uffe0\022" +
    "\uffe0\023\uffe0\024\uffe0\027\uffe0\030\110\041\113\042\uffe0" +
    "\044\uffe0\001\002\000\032\004\107\005\104\006\112\010" +
    "\uffe1\022\114\023\uffe1\024\uffe1\027\uffe1\030\110\041\113" +
    "\042\uffe1\044\uffe1\001\002\000\032\004\107\005\104\006" +
    "\112\010\uffe3\022\114\023\106\024\uffe3\027\uffe3\030\110" +
    "\041\113\042\uffe3\044\uffe3\001\002\000\032\004\uffdf\005" +
    "\uffdf\006\112\010\uffdf\022\uffdf\023\uffdf\024\uffdf\027\uffdf" +
    "\030\110\041\113\042\uffdf\044\uffdf\001\002\000\036\005" +
    "\072\007\060\025\054\031\076\056\100\057\071\060\064" +
    "\061\102\062\055\063\073\064\066\065\074\066\057\067" +
    "\063\001\002\000\024\004\107\005\104\006\112\010\151" +
    "\022\114\023\106\024\105\030\110\041\113\001\002\000" +
    "\004\044\152\001\002\000\062\005\uffea\007\uffea\011\uffea" +
    "\012\uffea\020\uffea\021\uffea\025\uffea\026\uffea\031\uffea\033" +
    "\uffea\052\uffea\053\uffea\054\uffea\055\uffea\056\uffea\057\uffea" +
    "\060\uffea\061\uffea\062\uffea\063\uffea\064\uffea\065\uffea\066" +
    "\uffea\067\uffea\001\002\000\004\007\164\001\002\000\004" +
    "\041\161\001\002\000\004\041\156\001\002\000\036\005" +
    "\072\007\060\025\054\031\076\056\100\057\071\060\064" +
    "\061\102\062\055\063\073\064\066\065\074\066\057\067" +
    "\063\001\002\000\024\004\107\005\104\006\112\022\114" +
    "\023\106\024\105\030\110\041\113\042\160\001\002\000" +
    "\032\004\uffcd\005\uffcd\006\uffcd\010\uffcd\022\uffcd\023\uffcd" +
    "\024\uffcd\027\uffcd\030\uffcd\041\uffcd\042\uffcd\044\uffcd\001" +
    "\002\000\036\005\072\007\060\025\054\031\076\056\100" +
    "\057\071\060\064\061\102\062\055\063\073\064\066\065" +
    "\074\066\057\067\063\001\002\000\024\004\107\005\104" +
    "\006\112\022\114\023\106\024\105\030\110\041\113\042" +
    "\163\001\002\000\032\004\uffce\005\uffce\006\uffce\010\uffce" +
    "\022\uffce\023\uffce\024\uffce\027\uffce\030\uffce\041\uffce\042" +
    "\uffce\044\uffce\001\002\000\004\010\165\001\002\000\032" +
    "\004\uffcc\005\uffcc\006\uffcc\010\uffcc\022\uffcc\023\uffcc\024" +
    "\uffcc\027\uffcc\030\uffcc\041\uffcc\042\uffcc\044\uffcc\001\002" +
    "\000\032\004\uffdd\005\uffdd\006\uffdd\010\uffdd\022\uffdd\023" +
    "\uffdd\024\uffdd\027\uffdd\030\110\041\113\042\uffdd\044\uffdd" +
    "\001\002\000\036\005\072\007\060\025\054\031\076\056" +
    "\100\057\071\060\064\061\102\062\055\063\073\064\066" +
    "\065\074\066\057\067\063\001\002\000\024\004\107\005" +
    "\104\006\112\010\171\022\114\023\106\024\105\030\110" +
    "\041\113\001\002\000\032\004\uffd8\005\uffd8\006\uffd8\010" +
    "\uffd8\022\uffd8\023\uffd8\024\uffd8\027\uffd8\030\uffd8\041\uffd8" +
    "\042\uffd8\044\uffd8\001\002\000\006\043\124\061\173\001" +
    "\002\000\004\007\174\001\002\000\042\005\072\007\130" +
    "\010\uffc6\025\054\027\uffc6\031\076\056\100\057\071\060" +
    "\064\061\102\062\055\063\073\064\066\065\074\066\057" +
    "\067\063\001\002\000\006\010\176\027\137\001\002\000" +
    "\024\004\uffda\005\uffda\006\uffda\022\uffda\023\uffda\024\uffda" +
    "\030\uffda\041\uffda\044\177\001\002\000\062\005\uffe9\007" +
    "\uffe9\011\uffe9\012\uffe9\020\uffe9\021\uffe9\025\uffe9\026\uffe9" +
    "\031\uffe9\033\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9\056" +
    "\uffe9\057\uffe9\060\uffe9\061\uffe9\062\uffe9\063\uffe9\064\uffe9" +
    "\065\uffe9\066\uffe9\067\uffe9\001\002\000\004\012\204\001" +
    "\002\000\036\005\072\007\060\025\054\031\076\056\100" +
    "\057\071\060\064\061\102\062\055\063\073\064\066\065" +
    "\074\066\057\067\063\001\002\000\024\004\107\005\104" +
    "\006\112\022\114\023\106\024\105\030\110\041\113\044" +
    "\203\001\002\000\004\012\uffbe\001\002\000\006\012\uffc3" +
    "\032\uffc3\001\002\000\036\005\072\007\060\025\054\031" +
    "\076\056\100\057\071\060\064\061\102\062\055\063\073" +
    "\064\066\065\074\066\057\067\063\001\002\000\024\004" +
    "\107\005\104\006\112\022\114\023\106\024\105\027\207" +
    "\030\110\041\113\001\002\000\036\005\072\007\060\025" +
    "\054\031\076\056\100\057\071\060\064\061\102\062\055" +
    "\063\073\064\066\065\074\066\057\067\063\001\002\000" +
    "\024\004\107\005\104\006\112\022\114\023\106\024\105" +
    "\027\211\030\110\041\113\001\002\000\036\005\072\007" +
    "\060\025\054\031\076\056\100\057\071\060\064\061\102" +
    "\062\055\063\073\064\066\065\074\066\057\067\063\001" +
    "\002\000\024\004\107\005\104\006\112\010\213\022\114" +
    "\023\106\024\105\030\110\041\113\001\002\000\004\044" +
    "\214\001\002\000\062\005\uffed\007\uffed\011\uffed\012\uffed" +
    "\020\uffed\021\uffed\025\uffed\026\uffed\031\uffed\033\uffed\052" +
    "\uffed\053\uffed\054\uffed\055\uffed\056\uffed\057\uffed\060\uffed" +
    "\061\uffed\062\uffed\063\uffed\064\uffed\065\uffed\066\uffed\067" +
    "\uffed\001\002\000\036\005\072\007\060\025\054\031\076" +
    "\056\100\057\071\060\064\061\102\062\055\063\073\064" +
    "\066\065\074\066\057\067\063\001\002\000\036\005\072" +
    "\007\060\025\054\031\076\056\100\057\071\060\064\061" +
    "\102\062\055\063\073\064\066\065\074\066\057\067\063" +
    "\001\002\000\024\004\107\005\104\006\112\022\114\023" +
    "\106\024\105\030\110\041\113\044\220\001\002\000\062" +
    "\005\uffe5\007\uffe5\011\uffe5\012\uffe5\020\uffe5\021\uffe5\025" +
    "\uffe5\026\uffe5\031\uffe5\033\uffe5\052\uffe5\053\uffe5\054\uffe5" +
    "\055\uffe5\056\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5\063" +
    "\uffe5\064\uffe5\065\uffe5\066\uffe5\067\uffe5\001\002\000\024" +
    "\004\107\005\104\006\112\022\114\023\106\024\105\030" +
    "\110\041\113\042\222\001\002\000\004\045\223\001\002" +
    "\000\036\005\072\007\060\025\054\031\076\056\100\057" +
    "\071\060\064\061\102\062\055\063\073\064\066\065\074" +
    "\066\057\067\063\001\002\000\024\004\107\005\104\006" +
    "\112\022\114\023\106\024\105\030\110\041\113\044\225" +
    "\001\002\000\062\005\uffe4\007\uffe4\011\uffe4\012\uffe4\020" +
    "\uffe4\021\uffe4\025\uffe4\026\uffe4\031\uffe4\033\uffe4\052\uffe4" +
    "\053\uffe4\054\uffe4\055\uffe4\056\uffe4\057\uffe4\060\uffe4\061" +
    "\uffe4\062\uffe4\063\uffe4\064\uffe4\065\uffe4\066\uffe4\067\uffe4" +
    "\001\002\000\024\004\uffd0\005\uffd0\006\uffd0\022\uffd0\023" +
    "\uffd0\024\uffd0\030\uffd0\041\215\045\216\001\002\000\004" +
    "\012\230\001\002\000\062\005\ufffb\007\ufffb\011\ufffb\012" +
    "\ufffb\020\ufffb\021\ufffb\025\ufffb\026\ufffb\031\ufffb\033\ufffb" +
    "\052\ufffb\053\ufffb\054\ufffb\055\ufffb\056\ufffb\057\ufffb\060" +
    "\ufffb\061\ufffb\062\ufffb\063\ufffb\064\ufffb\065\ufffb\066\ufffb" +
    "\067\ufffb\001\002\000\024\004\107\005\104\006\112\010" +
    "\136\022\114\023\106\024\105\030\110\041\113\001\002" +
    "\000\036\005\072\007\060\025\054\031\076\056\100\057" +
    "\071\060\064\061\102\062\055\063\073\064\066\065\074" +
    "\066\057\067\063\001\002\000\024\004\107\005\104\006" +
    "\112\010\234\022\114\023\106\024\105\030\110\041\113" +
    "\001\002\000\054\005\072\007\060\011\061\020\056\025" +
    "\054\026\052\031\076\052\065\053\053\054\050\055\077" +
    "\056\100\057\071\060\064\061\226\062\055\063\073\064" +
    "\066\065\074\066\057\067\063\001\002\000\062\005\uffe7" +
    "\007\uffe7\011\uffe7\012\uffe7\020\uffe7\021\236\025\uffe7\026" +
    "\uffe7\031\uffe7\033\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7" +
    "\056\uffe7\057\uffe7\060\uffe7\061\uffe7\062\uffe7\063\uffe7\064" +
    "\uffe7\065\uffe7\066\uffe7\067\uffe7\001\002\000\054\005\072" +
    "\007\060\011\061\020\056\025\054\026\052\031\076\052" +
    "\065\053\053\054\050\055\077\056\100\057\071\060\064" +
    "\061\226\062\055\063\073\064\066\065\074\066\057\067" +
    "\063\001\002\000\062\005\uffe8\007\uffe8\011\uffe8\012\uffe8" +
    "\020\uffe8\021\uffe8\025\uffe8\026\uffe8\031\uffe8\033\uffe8\052" +
    "\uffe8\053\uffe8\054\uffe8\055\uffe8\056\uffe8\057\uffe8\060\uffe8" +
    "\061\uffe8\062\uffe8\063\uffe8\064\uffe8\065\uffe8\066\uffe8\067" +
    "\uffe8\001\002\000\032\004\uffcb\005\uffcb\006\uffcb\010\uffcb" +
    "\022\uffcb\023\uffcb\024\uffcb\027\uffcb\030\110\041\113\042" +
    "\uffcb\044\uffcb\001\002\000\036\005\072\007\060\025\054" +
    "\031\076\056\100\057\071\060\064\061\102\062\055\063" +
    "\073\064\066\065\074\066\057\067\063\001\002\000\024" +
    "\004\107\005\104\006\112\010\243\022\114\023\106\024" +
    "\105\030\110\041\113\001\002\000\004\044\244\001\002" +
    "\000\062\005\uffec\007\uffec\011\uffec\012\uffec\020\uffec\021" +
    "\uffec\025\uffec\026\uffec\031\uffec\033\uffec\052\uffec\053\uffec" +
    "\054\uffec\055\uffec\056\uffec\057\uffec\060\uffec\061\uffec\062" +
    "\uffec\063\uffec\064\uffec\065\uffec\066\uffec\067\uffec\001\002" +
    "\000\036\005\072\007\060\025\054\031\076\056\100\057" +
    "\071\060\064\061\102\062\055\063\073\064\066\065\074" +
    "\066\057\067\063\001\002\000\024\004\107\005\104\006" +
    "\112\010\247\022\114\023\106\024\105\030\110\041\113" +
    "\001\002\000\054\005\072\007\060\011\061\020\056\025" +
    "\054\026\052\031\076\052\065\053\053\054\050\055\077" +
    "\056\100\057\071\060\064\061\226\062\055\063\073\064" +
    "\066\065\074\066\057\067\063\001\002\000\062\005\uffe6" +
    "\007\uffe6\011\uffe6\012\uffe6\020\uffe6\021\uffe6\025\uffe6\026" +
    "\uffe6\031\uffe6\033\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6" +
    "\056\uffe6\057\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6\064" +
    "\uffe6\065\uffe6\066\uffe6\067\uffe6\001\002\000\006\012\ufff0" +
    "\033\ufff0\001\002\000\036\005\072\007\060\025\054\031" +
    "\076\056\100\057\071\060\064\061\102\062\055\063\073" +
    "\064\066\065\074\066\057\067\063\001\002\000\024\004" +
    "\107\005\104\006\112\022\114\023\106\024\105\027\254" +
    "\030\110\041\113\001\002\000\036\005\072\007\060\025" +
    "\054\031\076\056\100\057\071\060\064\061\102\062\055" +
    "\063\073\064\066\065\074\066\057\067\063\001\002\000" +
    "\024\004\107\005\104\006\112\010\256\022\114\023\106" +
    "\024\105\030\110\041\113\001\002\000\004\044\257\001" +
    "\002\000\062\005\uffeb\007\uffeb\011\uffeb\012\uffeb\020\uffeb" +
    "\021\uffeb\025\uffeb\026\uffeb\031\uffeb\033\uffeb\052\uffeb\053" +
    "\uffeb\054\uffeb\055\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb" +
    "\062\uffeb\063\uffeb\064\uffeb\065\uffeb\066\uffeb\067\uffeb\001" +
    "\002\000\004\061\261\001\002\000\006\010\uffc0\027\uffc0" +
    "\001\002\000\006\010\uffc1\027\uffc1\001\002\000\004\042" +
    "\264\001\002\000\006\016\ufff9\061\ufff9\001\002\000\004" +
    "\011\uffff\001\002\000\004\011\267\001\002\000\004\032" +
    "\270\001\002\000\004\034\271\001\002\000\022\013\020" +
    "\014\017\015\030\036\021\047\026\050\024\051\023\061" +
    "\025\001\002\000\004\016\273\001\002\000\004\007\274" +
    "\001\002\000\004\035\275\001\002\000\004\041\276\001" +
    "\002\000\004\042\277\001\002\000\004\061\300\001\002" +
    "\000\004\010\301\001\002\000\004\011\ufffe\001\002\000" +
    "\004\011\061\001\002\000\004\012\ufffd\001\002\000\004" +
    "\012\305\001\002\000\006\002\ufffc\037\ufffc\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\304\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\010\001\001" +
    "\000\002\001\001\000\004\016\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\015" +
    "\001\001\000\006\007\021\013\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\042\013\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\257" +
    "\001\001\000\002\001\001\000\004\010\046\001\001\000" +
    "\014\003\050\004\074\005\066\013\026\014\067\001\001" +
    "\000\002\001\001\000\012\003\050\004\074\005\250\014" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\237\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\230\001\001\000\012\003\050" +
    "\004\074\005\226\014\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\177\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\165\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\102\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\145\001" +
    "\001\000\004\014\144\001\001\000\004\014\143\001\001" +
    "\000\004\014\142\001\001\000\002\001\001\000\004\014" +
    "\120\001\001\000\004\014\117\001\001\000\004\014\115" +
    "\001\001\000\004\014\114\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\125\014\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\130\014\131\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\134\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\140\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\147\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\156\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\161\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\167\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\174\014" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\201\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\205\001\001\000\002\001\001\000\004\014\207\001" +
    "\001\000\002\001\001\000\004\014\211\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\220\001\001\000\004\014\216\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\223\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\232\001\001\000\002\001\001" +
    "\000\010\003\234\004\074\014\067\001\001\000\002\001" +
    "\001\000\010\003\236\004\074\014\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\241\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\245\001\001\000\002\001\001\000\010\003\247\004" +
    "\074\014\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\252\001\001\000\002\001\001\000\004\014" +
    "\254\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\265" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\271\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\301" +
    "\001\001\000\004\004\302\001\001\000\004\021\303\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$mj$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$mj$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$mj$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public PrintWriter out; 
    
    public String programName;

    public void unrecovered_syntax_error(Symbol cur_SymbolValue) {
        report_fatal_error("Fatal syntax error", cur_SymbolValue);
    }
    
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        done_parsing();
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        throw new mjparser.ParseException("Fatal parsing error", 
                                          tok.line, tok.pos);
    }
    
    public void report_error(String message, Object info) {
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        System.err.println("[" + tok.line + "," + tok.pos + "] " 
                               + message + " at " + tok.toString() );
    }
            

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$mj$actions {
  private final mj parser;

  /** Constructor */
  CUP$mj$actions(mj parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$mj$do_action(
    int                        CUP$mj$act_num,
    java_cup.runtime.lr_parser CUP$mj$parser,
    java.util.Stack            CUP$mj$stack,
    int                        CUP$mj$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$mj$result;

      /* select the action based on the action number */
      switch (CUP$mj$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // otherClass ::= 
            {
              LinkedList<IClassDecl> RESULT =null;
		
        RESULT = new LinkedList<>();
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("otherClass",12, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // otherClass ::= otherClass CLASS ID LBRACE variableDecl methodDecl RBRACE 
            {
              LinkedList<IClassDecl> RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		LinkedList<IClassDecl> cl = (LinkedList<IClassDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue id = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		LinkedList<VarDecl> v = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<MethodDecl> m = (LinkedList<MethodDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
        cl.add(new TopClassDecl(id.line,id.pos,id.lexeme,v,m));
        RESULT = cl;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("otherClass",12, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // returnStatement ::= 
            {
              IExp RESULT =null;
		
    RESULT = null;

              CUP$mj$result = parser.getSymbolFactory().newSymbol("returnStatement",11, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // returnStatement ::= RETURN expression SEMI 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
    RESULT = a; 

              CUP$mj$result = parser.getSymbolFactory().newSymbol("returnStatement",11, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // paras ::= 
            {
              LinkedList<Formal> RESULT =null;
		
    RESULT = new LinkedList<>();

              CUP$mj$result = parser.getSymbolFactory().newSymbol("paras",8, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // paras ::= paras COMMA type ID 
            {
              LinkedList<Formal> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		LinkedList<Formal> list = (LinkedList<Formal>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int typleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IType typ = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
    Formal para = new Formal(name.line,name.pos,typ,name.lexeme);
    list.add(para);
    RESULT = list;

              CUP$mj$result = parser.getSymbolFactory().newSymbol("paras",8, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // paras ::= type ID 
            {
              LinkedList<Formal> RESULT =null;
		int typleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IType typ = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
    LinkedList<Formal> ls = new LinkedList<Formal>();
    Formal para = new Formal(name.line,name.pos,typ,name.lexeme);
    ls.add(para);
    RESULT = ls;

              CUP$mj$result = parser.getSymbolFactory().newSymbol("paras",8, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // methodDecl ::= 
            {
              LinkedList<MethodDecl> RESULT =null;
		
        RESULT = new LinkedList<>();
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("methodDecl",5, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // methodDecl ::= methodDecl PUBLIC type ID LPAREN paras RPAREN LBRACE variableDecl statement_list returnStatement RBRACE 
            {
              LinkedList<MethodDecl> RESULT =null;
		int mlleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-11)).left;
		int mlright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-11)).right;
		LinkedList<MethodDecl> ml = (LinkedList<MethodDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-11)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-10)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-10)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-10)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)).right;
		IType t = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).right;
		SymbolValue id = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-8)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		LinkedList<Formal> p = (LinkedList<Formal>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		LinkedList<VarDecl> vl = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		List sl = (List)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp r = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		

        ml.add(new MethodDecl(op.line,op.pos,t,id.lexeme,p,vl,sl,r));
        RESULT = ml;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("methodDecl",5, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-11)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // variableDecl ::= 
            {
              LinkedList<VarDecl> RESULT =null;
		

RESULT = new LinkedList<VarDecl>();

              CUP$mj$result = parser.getSymbolFactory().newSymbol("variableDecl",6, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // variableDecl ::= variableDecl type ID SEMI 
            {
              LinkedList<VarDecl> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		LinkedList<VarDecl> list = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int typleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IType typ = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		

            //LinkedList<VarDecl> var_list = new LinkedList<VarDecl>();
            VarDecl _var = new VarDecl(name.line,name.pos,typ,name.lexeme);
            list.add(_var);
            RESULT = list;
        
              CUP$mj$result = parser.getSymbolFactory().newSymbol("variableDecl",6, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // subexpression ::= 
            {
              LinkedList<IExp> RESULT =null;
		
    RESULT = new LinkedList<IExp>();


              CUP$mj$result = parser.getSymbolFactory().newSymbol("subexpression",7, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // subexpression ::= LPAREN subexpression RPAREN 
            {
              LinkedList<IExp> RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<IExp> se = (LinkedList<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
    RESULT = se;

              CUP$mj$result = parser.getSymbolFactory().newSymbol("subexpression",7, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // subexpression ::= subexpression COMMA expression 
            {
              LinkedList<IExp> RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		LinkedList<IExp> se = (LinkedList<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp exp = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        se.add(exp);
        RESULT = se;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("subexpression",7, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // subexpression ::= expression 
            {
              LinkedList<IExp> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp exp = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        LinkedList<IExp> a = new LinkedList<IExp>();
        a.add(exp);
        RESULT = a;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("subexpression",7, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression ::= LPAREN expression RPAREN 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = a; 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression ::= NOT expression 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new NotExp(op.line,op.pos,a); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression ::= NEW ID LPAREN RPAREN 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		 RESULT = new NewExp(op.line,op.pos,a+""); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression ::= NEW INT LBRACKET expression RBRACKET 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = new NewArrayExp(op.line,op.pos,new IntType(op.line,op.pos),a); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression ::= NEW MEGGYCOLOR LBRACKET expression RBRACKET 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = new NewArrayExp(op.line,op.pos,new ColorType(op.line,op.pos),a); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= THIS 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ThisLiteral(op.line,op.pos,op.lexeme,op.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= ID 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IdLiteral(a.line,a.pos,a+""); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= FALSE 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new FalseLiteral(op.line,op.pos,op.lexeme,op.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= TRUE 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new TrueLiteral(op.line,op.pos,op.lexeme,op.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= TONE_LITERAL 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ToneLiteral(a.line,a.pos,a.lexeme,a.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= BUTTON_LITERAL 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ButtonLiteral(a.line,a.pos,a.lexeme,a.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= COLOR_LITERAL 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ColorLiteral(a.line,a.pos,a.lexeme,a.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= INT_LITERAL 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IntLiteral(a.line,a.pos,a.lexeme,a.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= LPAREN BYTE RPAREN expression 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		  RESULT = new ByteCast(op.line,op.pos,a); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= MEGGYCHECKBUTTON LPAREN expression RPAREN 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = new MeggyCheckButton(op.line,op.pos,a); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= MEGGYGETPIXEL LPAREN expression COMMA expression RPAREN 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = new MeggyGetPixel(op.line,op.pos,a,b); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= expression DOT ID LPAREN subexpression RPAREN 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue b = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<IExp> exp = (LinkedList<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = new CallExp(b.line,b.pos,a,b.lexeme,exp); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= expression DOT LENGTH 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new LengthExp(op.line,op.pos,a); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= expression LBRACKET expression RBRACKET 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = new ArrayExp(a.getLine(),a.getPos(),a,b); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression ::= MINUS expression 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new NegExp(op.line,op.pos,a); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression ::= expression TIMES expression 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new MulExp(op.line,op.pos,a,b); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression ::= expression MINUS expression 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new MinusExp(op.line,op.pos,a,b); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression ::= expression PLUS expression 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new PlusExp(op.line,op.pos,a,b); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= expression EQUAL expression 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new EqualExp(op.line,op.pos,a,b); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression ::= expression LT expression 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new LtExp(op.line,op.pos,a,b); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression ::= expression AND expression 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new AndExp(op.line,op.pos,a,b); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= ID LBRACKET expression RBRACKET ASSIGN expression SEMI 
            {
              IStatement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp c = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = new ArrayAssignStatement(op.line,op.pos,new IdLiteral(a.line,a.pos,a+""),b,c); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= ID ASSIGN expression SEMI 
            {
              IStatement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = new AssignStatement(op.line,op.pos,a.lexeme,b); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= WHILE LPAREN expression RPAREN statement 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement s = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new WhileStatement(op.line,op.pos,a,s); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= IF LPAREN expression RPAREN statement 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement s = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IfStatement(op.line,op.pos,a,s,null); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= IF LPAREN expression RPAREN statement ELSE statement 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IStatement s1 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement s2 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IfStatement(op.line,op.pos,a,s1,s2); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= expression DOT ID LPAREN subexpression RPAREN SEMI 
            {
              IStatement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue b = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		LinkedList<IExp> exp = (LinkedList<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		 RESULT = new CallStatement(b.line,b.pos,a,b.lexeme,exp); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= MEGGYDELAY LPAREN expression RPAREN SEMI 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		 RESULT = new MeggyDelay(op.line,op.pos,a); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= MEGGYTONESTART LPAREN expression COMMA expression RPAREN SEMI 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		 RESULT = new MeggyToneStart(op.line,op.pos,a,b); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= MEGGYSETAUXLEDS LPAREN expression RPAREN SEMI 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		 RESULT = new MeggySetAuxLEDs(op.line,op.pos,a); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= MEGGYSETPIXEL LPAREN expression COMMA expression COMMA expression RPAREN SEMI 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp c = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		 RESULT = new MeggySetPixel(op.line,op.pos,a,b,c); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= block_statement 
            {
              IStatement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		BlockStatement a = (BlockStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = a; 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement_list ::= 
            {
              List RESULT =null;
		
    RESULT = new LinkedList<IStatement>();

              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement_list",3, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement_list ::= statement statement_list 
            {
              List RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IStatement s = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		List sl = (List)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        List list = new LinkedList<IStatement>();
        list.add(s);
        list.addAll(sl);
        RESULT = list;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement_list",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type ::= ID 
            {
              IType RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 ; RESULT = new ClassType(op.line,op.pos,op.lexeme); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // type ::= MEGGYTONE 
            {
              IType RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ToneType(op.line,op.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type ::= MEGGYBUTTON 
            {
              IType RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ButtonType(op.line,op.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type ::= MEGGYCOLOR 
            {
              IType RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		  RESULT = new ColorType(op.line,op.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= VOID 
            {
              IType RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		  RESULT = new VoidType(op.line,op.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= INT 
            {
              IType RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IntType(op.line,op.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= BYTE 
            {
              IType RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ByteType(op.line,op.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= BOOLEAN 
            {
              IType RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new BoolType(op.line,op.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type ::= INT LBRACKET RBRACKET 
            {
              IType RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		 RESULT = new IntArrayType(op.line,op.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type ::= MEGGYCOLOR LBRACKET RBRACKET 
            {
              IType RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		 RESULT = new ColorArrayType(op.line,op.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // block_statement ::= LBRACE statement_list RBRACE 
            {
              BlockStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
    RESULT = new BlockStatement(op.line,op.pos,list);

              CUP$mj$result = parser.getSymbolFactory().newSymbol("block_statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // main_class ::= CLASS ID NT$0 LBRACE PUBLIC STATIC type MAIN LPAREN STRING LBRACKET RBRACKET ID RPAREN NT$1 block_statement NT$2 RBRACE 
            {
              MainClass RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (MainClass) ((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-16)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-16)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-16)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-10)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-10)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-10)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		SymbolValue param = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		BlockStatement s = (BlockStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		
            parser.out.flush();
          
              CUP$mj$result = parser.getSymbolFactory().newSymbol("main_class",4, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-17)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$2 ::= 
            {
              MainClass RESULT =(MainClass) ((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-14)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-14)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-14)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-8)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue param = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		BlockStatement s = (BlockStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;

                //System.out.println("a");
                RESULT = new MainClass(op.line,op.pos,name.lexeme,param.lexeme,s);

          
              CUP$mj$result = parser.getSymbolFactory().newSymbol("NT$2",15, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              MainClass RESULT =(MainClass) ((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-11)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-12)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-12)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-12)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue param = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
 
            //System.out.println("a");
            System.out.println("Generate prolog using avrH.rtl.s");
            InputStream mainPrologue=null;
            BufferedReader reader=null;
            try {
                // The syntax for loading a text resource file 
                // from a jar file here:
                // http://www.rgagnon.com/javadetails/java-0077.html
                mainPrologue 
                    = this.getClass().getClassLoader().getResourceAsStream(
                        "avrH.rtl.s");
                reader = new BufferedReader(new 
                    InputStreamReader(mainPrologue));

                String line = null;
                while ((line = reader.readLine()) != null) {
                  parser.out.println(line);
                }
            } catch ( Exception e2) {
                e2.printStackTrace();
            }
            finally{
                try{
                    if(mainPrologue!=null) mainPrologue.close();
                    if(reader!=null) reader.close();
                }
                catch (IOException e) {
                   e.printStackTrace();
                }
            }
          
              CUP$mj$result = parser.getSymbolFactory().newSymbol("NT$1",14, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              MainClass RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
 java.io.PrintStream sout 
                    = new java.io.PrintStream(
                        new java.io.FileOutputStream(name.lexeme+".java.s"));
                parser.out = new PrintWriter(sout);
                // Check filename is class name, if not exit with error message
                if(!parser.programName.equals(name+".java"))
                {
                    System.out.println("Filename and Classname don not match");
                    System.exit(0);
                }
            
              CUP$mj$result = parser.getSymbolFactory().newSymbol("NT$0",13, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= IMPORT MEGGY SEMI main_class otherClass 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue p = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		MainClass c = (MainClass)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		LinkedList<IClassDecl> a = (LinkedList<IClassDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        LinkedList<IClassDecl> clDecls = new LinkedList<IClassDecl>();
        clDecls.addAll(a);
        //System.out.println("11");
        RESULT = new Program(p.line,p.pos,c,clDecls);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		RESULT = start_val;
              CUP$mj$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$mj$parser.done_parsing();
          return CUP$mj$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}



//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Feb 21 16:32:49 EST 2019
//----------------------------------------------------

package mjparser;

import java_cup.runtime.*;
import java.util.*;
import java.io.PrintWriter;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileNotFoundException;
import ast.node.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Feb 21 16:32:49 EST 2019
  */
public class mj extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public mj() {super();}

  /** Constructor which sets the default scanner. */
  public mj(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public mj(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\115\000\002\002\004\000\002\002\007\000\002\017" +
    "\002\000\002\020\002\000\002\021\002\000\002\006\024" +
    "\000\002\004\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\005\004\000\002\005\005" +
    "\000\002\005\002\000\002\003\013\000\002\003\007\000" +
    "\002\003\011\000\002\003\007\000\002\003\011\000\002" +
    "\003\011\000\002\003\011\000\002\003\011\000\002\003" +
    "\011\000\002\003\007\000\002\003\007\000\002\003\007" +
    "\000\002\003\007\000\002\003\006\000\002\003\011\000" +
    "\002\014\005\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\004\000\002\014\006\000\002\014\005\000\002\014\010" +
    "\000\002\014\010\000\002\014\006\000\002\014\006\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\007\000\002\014\007" +
    "\000\002\014\006\000\002\014\004\000\002\014\005\000" +
    "\002\011\003\000\002\011\005\000\002\011\005\000\002" +
    "\011\002\000\002\010\005\000\002\010\006\000\002\007" +
    "\016\000\002\007\002\000\002\012\004\000\002\012\006" +
    "\000\002\012\002\000\002\015\005\000\002\015\002\000" +
    "\002\016\011\000\002\016\013\000\002\016\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\327\000\004\017\005\001\002\000\004\002\331\001" +
    "\002\000\004\046\006\001\002\000\004\044\007\001\002" +
    "\000\004\037\010\001\002\000\004\061\310\001\002\000" +
    "\006\002\uffb5\037\013\001\002\000\004\002\000\001\002" +
    "\000\004\061\014\001\002\000\006\011\015\040\016\001" +
    "\002\000\022\013\022\014\021\015\032\036\023\047\030" +
    "\050\026\051\025\061\027\001\002\000\004\061\017\001" +
    "\002\000\004\011\020\001\002\000\022\013\022\014\021" +
    "\015\032\036\023\047\030\050\026\051\025\061\027\001" +
    "\002\000\010\016\ufff6\041\302\061\ufff6\001\002\000\006" +
    "\016\ufff8\061\ufff8\001\002\000\006\016\ufff5\061\ufff5\001" +
    "\002\000\026\012\uffbd\013\022\014\021\015\032\032\037" +
    "\036\023\047\030\050\026\051\025\061\027\001\002\000" +
    "\006\016\ufff2\061\ufff2\001\002\000\006\016\ufff3\061\ufff3" +
    "\001\002\000\006\016\ufff1\061\ufff1\001\002\000\010\016" +
    "\ufff4\041\035\061\ufff4\001\002\000\004\061\033\001\002" +
    "\000\006\016\ufff7\061\ufff7\001\002\000\004\044\034\001" +
    "\002\000\100\005\uffc0\007\uffc0\011\uffc0\012\uffc0\013\uffc0" +
    "\014\uffc0\015\uffc0\020\uffc0\025\uffc0\026\uffc0\031\uffc0\032" +
    "\uffc0\033\uffc0\036\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0" +
    "\053\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0\060\uffc0\061" +
    "\uffc0\062\uffc0\063\uffc0\064\uffc0\065\uffc0\066\uffc0\067\uffc0" +
    "\001\002\000\004\042\036\001\002\000\006\016\ufffa\061" +
    "\ufffa\001\002\000\022\013\022\014\021\015\032\036\023" +
    "\047\030\050\026\051\025\061\027\001\002\000\004\012" +
    "\044\001\002\000\004\061\042\001\002\000\004\044\043" +
    "\001\002\000\100\005\uffbf\007\uffbf\011\uffbf\012\uffbf\013" +
    "\uffbf\014\uffbf\015\uffbf\020\uffbf\025\uffbf\026\uffbf\031\uffbf" +
    "\032\uffbf\033\uffbf\036\uffbf\047\uffbf\050\uffbf\051\uffbf\052" +
    "\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf" +
    "\061\uffbf\062\uffbf\063\uffbf\064\uffbf\065\uffbf\066\uffbf\067" +
    "\uffbf\001\002\000\006\002\uffb5\037\013\001\002\000\004" +
    "\002\uffb6\001\002\000\004\061\047\001\002\000\004\007" +
    "\050\001\002\000\024\010\uffba\013\022\014\021\015\032" +
    "\036\023\047\030\050\026\051\025\061\027\001\002\000" +
    "\004\061\277\001\002\000\004\010\053\001\002\000\004" +
    "\011\054\001\002\000\022\013\022\014\021\015\032\036" +
    "\023\047\030\050\026\051\025\061\027\001\002\000\076" +
    "\005\101\007\067\011\066\012\uffee\013\022\014\021\015" +
    "\032\020\065\025\062\026\060\031\103\033\uffee\036\023" +
    "\047\030\050\026\051\025\052\073\053\061\054\056\055" +
    "\104\056\105\057\077\060\072\061\070\062\063\063\100" +
    "\064\074\065\102\066\064\067\071\001\002\000\004\007" +
    "\271\001\002\000\060\005\101\007\067\011\066\012\uffee" +
    "\020\065\025\062\026\060\031\103\033\uffee\052\073\053" +
    "\061\054\056\055\104\056\105\057\077\060\072\061\235" +
    "\062\063\063\100\064\074\065\102\066\064\067\071\001" +
    "\002\000\004\007\263\001\002\000\004\007\257\001\002" +
    "\000\036\005\101\007\067\025\062\031\103\056\105\057" +
    "\077\060\072\061\107\062\063\063\100\064\074\065\102" +
    "\066\064\067\071\001\002\000\032\004\uffcd\005\uffcd\006" +
    "\uffcd\010\uffcd\022\uffcd\023\uffcd\024\uffcd\027\uffcd\030\uffcd" +
    "\041\uffcd\042\uffcd\044\uffcd\001\002\000\032\004\uffce\005" +
    "\uffce\006\uffce\010\uffce\022\uffce\023\uffce\024\uffce\027\uffce" +
    "\030\uffce\041\uffce\042\uffce\044\uffce\001\002\000\004\007" +
    "\240\001\002\000\056\005\101\007\067\011\066\012\uffee" +
    "\020\065\025\062\026\060\031\103\052\073\053\061\054" +
    "\056\055\104\056\105\057\077\060\072\061\235\062\063" +
    "\063\100\064\074\065\102\066\064\067\071\001\002\000" +
    "\040\005\101\007\067\015\140\025\062\031\103\056\105" +
    "\057\077\060\072\061\107\062\063\063\100\064\074\065" +
    "\102\066\064\067\071\001\002\000\026\004\uffcb\005\uffcb" +
    "\006\uffcb\022\uffcb\023\uffcb\024\uffcb\030\uffcb\041\223\045" +
    "\224\061\ufff1\001\002\000\032\004\uffca\005\uffca\006\uffca" +
    "\010\uffca\022\uffca\023\uffca\024\uffca\027\uffca\030\uffca\041" +
    "\uffca\042\uffca\044\uffca\001\002\000\032\004\uffd1\005\uffd1" +
    "\006\uffd1\010\uffd1\022\uffd1\023\uffd1\024\uffd1\027\uffd1\030" +
    "\uffd1\041\uffd1\042\uffd1\044\uffd1\001\002\000\004\007\213" +
    "\001\002\000\032\004\uffd0\005\uffd0\006\uffd0\010\uffd0\022" +
    "\uffd0\023\uffd0\024\uffd0\027\uffd0\030\uffd0\041\uffd0\042\uffd0" +
    "\044\uffd0\001\002\000\006\012\uffb8\033\206\001\002\000" +
    "\022\004\114\005\112\006\117\022\121\023\113\024\111" +
    "\030\177\041\120\001\002\000\004\007\174\001\002\000" +
    "\032\004\uffcc\005\uffcc\006\uffcc\010\uffcc\022\uffcc\023\uffcc" +
    "\024\uffcc\027\uffcc\030\uffcc\041\uffcc\042\uffcc\044\uffcc\001" +
    "\002\000\036\005\101\007\067\025\062\031\103\056\105" +
    "\057\077\060\072\061\107\062\063\063\100\064\074\065" +
    "\102\066\064\067\071\001\002\000\032\004\uffcf\005\uffcf" +
    "\006\uffcf\010\uffcf\022\uffcf\023\uffcf\024\uffcf\027\uffcf\030" +
    "\uffcf\041\uffcf\042\uffcf\044\uffcf\001\002\000\010\014\162" +
    "\047\161\061\160\001\002\000\004\007\154\001\002\000" +
    "\004\007\106\001\002\000\036\005\101\007\067\025\062" +
    "\031\103\056\105\057\077\060\072\061\107\062\063\063" +
    "\100\064\074\065\102\066\064\067\071\001\002\000\032" +
    "\004\uffcb\005\uffcb\006\uffcb\010\uffcb\022\uffcb\023\uffcb\024" +
    "\uffcb\027\uffcb\030\uffcb\041\uffcb\042\uffcb\044\uffcb\001\002" +
    "\000\024\004\114\005\112\006\117\022\121\023\113\024" +
    "\111\027\116\030\115\041\120\001\002\000\036\005\101" +
    "\007\067\025\062\031\103\056\105\057\077\060\072\061" +
    "\107\062\063\063\100\064\074\065\102\066\064\067\071" +
    "\001\002\000\036\005\101\007\067\025\062\031\103\056" +
    "\105\057\077\060\072\061\107\062\063\063\100\064\074" +
    "\065\102\066\064\067\071\001\002\000\036\005\101\007" +
    "\067\025\062\031\103\056\105\057\077\060\072\061\107" +
    "\062\063\063\100\064\074\065\102\066\064\067\071\001" +
    "\002\000\036\005\101\007\067\025\062\031\103\056\105" +
    "\057\077\060\072\061\107\062\063\063\100\064\074\065" +
    "\102\066\064\067\071\001\002\000\006\043\131\061\130" +
    "\001\002\000\036\005\101\007\067\025\062\031\103\056" +
    "\105\057\077\060\072\061\107\062\063\063\100\064\074" +
    "\065\102\066\064\067\071\001\002\000\036\005\101\007" +
    "\067\025\062\031\103\056\105\057\077\060\072\061\107" +
    "\062\063\063\100\064\074\065\102\066\064\067\071\001" +
    "\002\000\036\005\101\007\067\025\062\031\103\056\105" +
    "\057\077\060\072\061\107\062\063\063\100\064\074\065" +
    "\102\066\064\067\071\001\002\000\036\005\101\007\067" +
    "\025\062\031\103\056\105\057\077\060\072\061\107\062" +
    "\063\063\100\064\074\065\102\066\064\067\071\001\002" +
    "\000\030\004\114\005\112\006\117\010\uffdd\023\uffdd\024" +
    "\uffdd\027\uffdd\030\115\041\120\042\uffdd\044\uffdd\001\002" +
    "\000\024\004\114\005\112\006\117\022\121\023\113\024" +
    "\111\030\115\041\120\042\124\001\002\000\032\004\uffd7" +
    "\005\uffd7\006\uffd7\010\uffd7\022\uffd7\023\uffd7\024\uffd7\027" +
    "\uffd7\030\uffd7\041\uffd7\042\uffd7\044\uffd7\001\002\000\032" +
    "\004\uffd9\005\uffd9\006\uffd9\010\uffd9\022\uffd9\023\uffd9\024" +
    "\uffd9\027\uffd9\030\115\041\120\042\uffd9\044\uffd9\001\002" +
    "\000\024\004\114\005\112\006\117\010\127\022\121\023" +
    "\113\024\111\030\115\041\120\001\002\000\032\004\uffd4" +
    "\005\uffd4\006\uffd4\010\uffd4\022\uffd4\023\uffd4\024\uffd4\027" +
    "\uffd4\030\uffd4\041\uffd4\042\uffd4\044\uffd4\001\002\000\004" +
    "\007\132\001\002\000\032\004\uffd6\005\uffd6\006\uffd6\010" +
    "\uffd6\022\uffd6\023\uffd6\024\uffd6\027\uffd6\030\uffd6\041\uffd6" +
    "\042\uffd6\044\uffd6\001\002\000\042\005\101\007\135\010" +
    "\uffc1\025\062\027\uffc1\031\103\056\105\057\077\060\072" +
    "\061\107\062\063\063\100\064\074\065\102\066\064\067" +
    "\071\001\002\000\006\010\147\027\144\001\002\000\026" +
    "\004\114\005\112\006\117\010\uffc4\022\121\023\113\024" +
    "\111\027\uffc4\030\115\041\120\001\002\000\044\005\101" +
    "\007\135\010\uffc1\015\140\025\062\027\uffc1\031\103\056" +
    "\105\057\077\060\072\061\107\062\063\063\100\064\074" +
    "\065\102\066\064\067\071\001\002\000\006\010\145\027" +
    "\144\001\002\000\026\004\114\005\112\006\117\010\143" +
    "\022\121\023\113\024\111\027\uffc4\030\115\041\120\001" +
    "\002\000\004\010\141\001\002\000\036\005\101\007\067" +
    "\025\062\031\103\056\105\057\077\060\072\061\107\062" +
    "\063\063\100\064\074\065\102\066\064\067\071\001\002" +
    "\000\032\004\uffd2\005\uffd2\006\uffd2\010\uffd2\022\uffd2\023" +
    "\uffd2\024\uffd2\027\uffd2\030\115\041\uffd2\042\uffd2\044\uffd2" +
    "\001\002\000\032\004\uffc5\005\uffc5\006\uffc5\010\uffc5\022" +
    "\uffc5\023\uffc5\024\uffc5\027\uffc5\030\uffc5\041\uffc5\042\uffc5" +
    "\044\uffc5\001\002\000\036\005\101\007\067\025\062\031" +
    "\103\056\105\057\077\060\072\061\107\062\063\063\100" +
    "\064\074\065\102\066\064\067\071\001\002\000\006\010" +
    "\uffc2\027\uffc2\001\002\000\026\004\114\005\112\006\117" +
    "\010\uffc3\022\121\023\113\024\111\027\uffc3\030\115\041" +
    "\120\001\002\000\032\004\uffd5\005\uffd5\006\uffd5\010\uffd5" +
    "\022\uffd5\023\uffd5\024\uffd5\027\uffd5\030\uffd5\041\uffd5\042" +
    "\uffd5\044\uffd5\001\002\000\032\004\uffdb\005\uffdb\006\117" +
    "\010\uffdb\022\uffdb\023\uffdb\024\uffdb\027\uffdb\030\115\041" +
    "\120\042\uffdb\044\uffdb\001\002\000\032\004\114\005\112" +
    "\006\117\010\uffdc\022\121\023\uffdc\024\uffdc\027\uffdc\030" +
    "\115\041\120\042\uffdc\044\uffdc\001\002\000\032\004\uffda" +
    "\005\uffda\006\117\010\uffda\022\uffda\023\uffda\024\uffda\027" +
    "\uffda\030\115\041\120\042\uffda\044\uffda\001\002\000\032" +
    "\004\114\005\112\006\117\010\uffde\022\121\023\113\024" +
    "\uffde\027\uffde\030\115\041\120\042\uffde\044\uffde\001\002" +
    "\000\036\005\101\007\067\025\062\031\103\056\105\057" +
    "\077\060\072\061\107\062\063\063\100\064\074\065\102" +
    "\066\064\067\071\001\002\000\024\004\114\005\112\006" +
    "\117\010\156\022\121\023\113\024\111\030\115\041\120" +
    "\001\002\000\004\044\157\001\002\000\062\005\uffea\007" +
    "\uffea\011\uffea\012\uffea\020\uffea\021\uffea\025\uffea\026\uffea" +
    "\031\uffea\033\uffea\052\uffea\053\uffea\054\uffea\055\uffea\056" +
    "\uffea\057\uffea\060\uffea\061\uffea\062\uffea\063\uffea\064\uffea" +
    "\065\uffea\066\uffea\067\uffea\001\002\000\004\007\171\001" +
    "\002\000\004\041\166\001\002\000\004\041\163\001\002" +
    "\000\036\005\101\007\067\025\062\031\103\056\105\057" +
    "\077\060\072\061\107\062\063\063\100\064\074\065\102" +
    "\066\064\067\071\001\002\000\024\004\114\005\112\006" +
    "\117\022\121\023\113\024\111\030\115\041\120\042\165" +
    "\001\002\000\032\004\uffc8\005\uffc8\006\uffc8\010\uffc8\022" +
    "\uffc8\023\uffc8\024\uffc8\027\uffc8\030\uffc8\041\uffc8\042\uffc8" +
    "\044\uffc8\001\002\000\036\005\101\007\067\025\062\031" +
    "\103\056\105\057\077\060\072\061\107\062\063\063\100" +
    "\064\074\065\102\066\064\067\071\001\002\000\024\004" +
    "\114\005\112\006\117\022\121\023\113\024\111\030\115" +
    "\041\120\042\170\001\002\000\032\004\uffc9\005\uffc9\006" +
    "\uffc9\010\uffc9\022\uffc9\023\uffc9\024\uffc9\027\uffc9\030\uffc9" +
    "\041\uffc9\042\uffc9\044\uffc9\001\002\000\004\010\172\001" +
    "\002\000\032\004\uffc7\005\uffc7\006\uffc7\010\uffc7\022\uffc7" +
    "\023\uffc7\024\uffc7\027\uffc7\030\uffc7\041\uffc7\042\uffc7\044" +
    "\uffc7\001\002\000\032\004\uffd8\005\uffd8\006\uffd8\010\uffd8" +
    "\022\uffd8\023\uffd8\024\uffd8\027\uffd8\030\115\041\120\042" +
    "\uffd8\044\uffd8\001\002\000\036\005\101\007\067\025\062" +
    "\031\103\056\105\057\077\060\072\061\107\062\063\063" +
    "\100\064\074\065\102\066\064\067\071\001\002\000\024" +
    "\004\114\005\112\006\117\010\176\022\121\023\113\024" +
    "\111\030\115\041\120\001\002\000\032\004\uffd3\005\uffd3" +
    "\006\uffd3\010\uffd3\022\uffd3\023\uffd3\024\uffd3\027\uffd3\030" +
    "\uffd3\041\uffd3\042\uffd3\044\uffd3\001\002\000\006\043\131" +
    "\061\200\001\002\000\004\007\201\001\002\000\042\005" +
    "\101\007\135\010\uffc1\025\062\027\uffc1\031\103\056\105" +
    "\057\077\060\072\061\107\062\063\063\100\064\074\065" +
    "\102\066\064\067\071\001\002\000\006\010\203\027\144" +
    "\001\002\000\024\004\uffd5\005\uffd5\006\uffd5\022\uffd5\023" +
    "\uffd5\024\uffd5\030\uffd5\041\uffd5\044\204\001\002\000\062" +
    "\005\uffe9\007\uffe9\011\uffe9\012\uffe9\020\uffe9\021\uffe9\025" +
    "\uffe9\026\uffe9\031\uffe9\033\uffe9\052\uffe9\053\uffe9\054\uffe9" +
    "\055\uffe9\056\uffe9\057\uffe9\060\uffe9\061\uffe9\062\uffe9\063" +
    "\uffe9\064\uffe9\065\uffe9\066\uffe9\067\uffe9\001\002\000\004" +
    "\012\211\001\002\000\036\005\101\007\067\025\062\031" +
    "\103\056\105\057\077\060\072\061\107\062\063\063\100" +
    "\064\074\065\102\066\064\067\071\001\002\000\024\004" +
    "\114\005\112\006\117\022\121\023\113\024\111\030\115" +
    "\041\120\044\210\001\002\000\004\012\uffb9\001\002\000" +
    "\006\012\uffbd\032\037\001\002\000\004\012\uffbe\001\002" +
    "\000\036\005\101\007\067\025\062\031\103\056\105\057" +
    "\077\060\072\061\107\062\063\063\100\064\074\065\102" +
    "\066\064\067\071\001\002\000\024\004\114\005\112\006" +
    "\117\022\121\023\113\024\111\027\215\030\115\041\120" +
    "\001\002\000\036\005\101\007\067\025\062\031\103\056" +
    "\105\057\077\060\072\061\107\062\063\063\100\064\074" +
    "\065\102\066\064\067\071\001\002\000\024\004\114\005" +
    "\112\006\117\022\121\023\113\024\111\027\217\030\115" +
    "\041\120\001\002\000\036\005\101\007\067\025\062\031" +
    "\103\056\105\057\077\060\072\061\107\062\063\063\100" +
    "\064\074\065\102\066\064\067\071\001\002\000\024\004" +
    "\114\005\112\006\117\010\221\022\121\023\113\024\111" +
    "\030\115\041\120\001\002\000\004\044\222\001\002\000" +
    "\062\005\uffed\007\uffed\011\uffed\012\uffed\020\uffed\021\uffed" +
    "\025\uffed\026\uffed\031\uffed\033\uffed\052\uffed\053\uffed\054" +
    "\uffed\055\uffed\056\uffed\057\uffed\060\uffed\061\uffed\062\uffed" +
    "\063\uffed\064\uffed\065\uffed\066\uffed\067\uffed\001\002\000" +
    "\036\005\101\007\067\025\062\031\103\056\105\057\077" +
    "\060\072\061\107\062\063\063\100\064\074\065\102\066" +
    "\064\067\071\001\002\000\036\005\101\007\067\025\062" +
    "\031\103\056\105\057\077\060\072\061\107\062\063\063" +
    "\100\064\074\065\102\066\064\067\071\001\002\000\024" +
    "\004\114\005\112\006\117\022\121\023\113\024\111\030" +
    "\115\041\120\044\226\001\002\000\062\005\uffe0\007\uffe0" +
    "\011\uffe0\012\uffe0\020\uffe0\021\uffe0\025\uffe0\026\uffe0\031" +
    "\uffe0\033\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0\056\uffe0" +
    "\057\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0\065" +
    "\uffe0\066\uffe0\067\uffe0\001\002\000\024\004\114\005\112" +
    "\006\117\022\121\023\113\024\111\030\115\041\120\042" +
    "\230\001\002\000\004\045\231\001\002\000\036\005\101" +
    "\007\067\025\062\031\103\056\105\057\077\060\072\061" +
    "\107\062\063\063\100\064\074\065\102\066\064\067\071" +
    "\001\002\000\024\004\114\005\112\006\117\022\121\023" +
    "\113\024\111\030\115\041\120\044\233\001\002\000\062" +
    "\005\uffdf\007\uffdf\011\uffdf\012\uffdf\020\uffdf\021\uffdf\025" +
    "\uffdf\026\uffdf\031\uffdf\033\uffdf\052\uffdf\053\uffdf\054\uffdf" +
    "\055\uffdf\056\uffdf\057\uffdf\060\uffdf\061\uffdf\062\uffdf\063" +
    "\uffdf\064\uffdf\065\uffdf\066\uffdf\067\uffdf\001\002\000\024" +
    "\004\114\005\112\006\117\010\143\022\121\023\113\024" +
    "\111\030\115\041\120\001\002\000\024\004\uffcb\005\uffcb" +
    "\006\uffcb\022\uffcb\023\uffcb\024\uffcb\030\uffcb\041\223\045" +
    "\224\001\002\000\004\012\237\001\002\000\006\012\uffef" +
    "\033\uffef\001\002\000\036\005\101\007\067\025\062\031" +
    "\103\056\105\057\077\060\072\061\107\062\063\063\100" +
    "\064\074\065\102\066\064\067\071\001\002\000\024\004" +
    "\114\005\112\006\117\010\242\022\121\023\113\024\111" +
    "\030\115\041\120\001\002\000\054\005\101\007\067\011" +
    "\244\020\065\025\062\026\060\031\103\052\073\053\061" +
    "\054\056\055\104\056\105\057\077\060\072\061\235\062" +
    "\063\063\100\064\074\065\102\066\064\067\071\001\002" +
    "\000\062\005\uffe3\007\uffe3\011\uffe3\012\uffe3\020\uffe3\021" +
    "\253\025\uffe3\026\uffe3\031\uffe3\033\uffe3\052\uffe3\053\uffe3" +
    "\054\uffe3\055\uffe3\056\uffe3\057\uffe3\060\uffe3\061\uffe3\062" +
    "\uffe3\063\uffe3\064\uffe3\065\uffe3\066\uffe3\067\uffe3\001\002" +
    "\000\056\005\101\007\067\011\066\012\uffee\020\065\025" +
    "\062\026\060\031\103\052\073\053\061\054\056\055\104" +
    "\056\105\057\077\060\072\061\235\062\063\063\100\064" +
    "\074\065\102\066\064\067\071\001\002\000\062\005\uffe4" +
    "\007\uffe4\011\uffe4\012\uffe4\020\uffe4\021\246\025\uffe4\026" +
    "\uffe4\031\uffe4\033\uffe4\052\uffe4\053\uffe4\054\uffe4\055\uffe4" +
    "\056\uffe4\057\uffe4\060\uffe4\061\uffe4\062\uffe4\063\uffe4\064" +
    "\uffe4\065\uffe4\066\uffe4\067\uffe4\001\002\000\054\005\101" +
    "\007\067\011\244\020\065\025\062\026\060\031\103\052" +
    "\073\053\061\054\056\055\104\056\105\057\077\060\072" +
    "\061\235\062\063\063\100\064\074\065\102\066\064\067" +
    "\071\001\002\000\062\005\uffe6\007\uffe6\011\uffe6\012\uffe6" +
    "\020\uffe6\021\uffe6\025\uffe6\026\uffe6\031\uffe6\033\uffe6\052" +
    "\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6\057\uffe6\060\uffe6" +
    "\061\uffe6\062\uffe6\063\uffe6\064\uffe6\065\uffe6\066\uffe6\067" +
    "\uffe6\001\002\000\062\005\uffe7\007\uffe7\011\uffe7\012\uffe7" +
    "\020\uffe7\021\uffe7\025\uffe7\026\uffe7\031\uffe7\033\uffe7\052" +
    "\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7" +
    "\061\uffe7\062\uffe7\063\uffe7\064\uffe7\065\uffe7\066\uffe7\067" +
    "\uffe7\001\002\000\004\012\252\001\002\000\062\005\ufffb" +
    "\007\ufffb\011\ufffb\012\ufffb\020\ufffb\021\ufffb\025\ufffb\026" +
    "\ufffb\031\ufffb\033\ufffb\052\ufffb\053\ufffb\054\ufffb\055\ufffb" +
    "\056\ufffb\057\ufffb\060\ufffb\061\ufffb\062\ufffb\063\ufffb\064" +
    "\ufffb\065\ufffb\066\ufffb\067\ufffb\001\002\000\054\005\101" +
    "\007\067\011\244\020\065\025\062\026\060\031\103\052" +
    "\073\053\061\054\056\055\104\056\105\057\077\060\072" +
    "\061\235\062\063\063\100\064\074\065\102\066\064\067" +
    "\071\001\002\000\062\005\uffe8\007\uffe8\011\uffe8\012\uffe8" +
    "\020\uffe8\021\uffe8\025\uffe8\026\uffe8\031\uffe8\033\uffe8\052" +
    "\uffe8\053\uffe8\054\uffe8\055\uffe8\056\uffe8\057\uffe8\060\uffe8" +
    "\061\uffe8\062\uffe8\063\uffe8\064\uffe8\065\uffe8\066\uffe8\067" +
    "\uffe8\001\002\000\062\005\uffe5\007\uffe5\011\uffe5\012\uffe5" +
    "\020\uffe5\021\uffe5\025\uffe5\026\uffe5\031\uffe5\033\uffe5\052" +
    "\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5\057\uffe5\060\uffe5" +
    "\061\uffe5\062\uffe5\063\uffe5\064\uffe5\065\uffe5\066\uffe5\067" +
    "\uffe5\001\002\000\032\004\uffc6\005\uffc6\006\uffc6\010\uffc6" +
    "\022\uffc6\023\uffc6\024\uffc6\027\uffc6\030\115\041\120\042" +
    "\uffc6\044\uffc6\001\002\000\036\005\101\007\067\025\062" +
    "\031\103\056\105\057\077\060\072\061\107\062\063\063" +
    "\100\064\074\065\102\066\064\067\071\001\002\000\024" +
    "\004\114\005\112\006\117\010\261\022\121\023\113\024" +
    "\111\030\115\041\120\001\002\000\004\044\262\001\002" +
    "\000\062\005\uffec\007\uffec\011\uffec\012\uffec\020\uffec\021" +
    "\uffec\025\uffec\026\uffec\031\uffec\033\uffec\052\uffec\053\uffec" +
    "\054\uffec\055\uffec\056\uffec\057\uffec\060\uffec\061\uffec\062" +
    "\uffec\063\uffec\064\uffec\065\uffec\066\uffec\067\uffec\001\002" +
    "\000\036\005\101\007\067\025\062\031\103\056\105\057" +
    "\077\060\072\061\107\062\063\063\100\064\074\065\102" +
    "\066\064\067\071\001\002\000\024\004\114\005\112\006" +
    "\117\010\265\022\121\023\113\024\111\030\115\041\120" +
    "\001\002\000\054\005\101\007\067\011\244\020\065\025" +
    "\062\026\060\031\103\052\073\053\061\054\056\055\104" +
    "\056\105\057\077\060\072\061\235\062\063\063\100\064" +
    "\074\065\102\066\064\067\071\001\002\000\062\005\uffe1" +
    "\007\uffe1\011\uffe1\012\uffe1\020\uffe1\021\uffe1\025\uffe1\026" +
    "\uffe1\031\uffe1\033\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1" +
    "\056\uffe1\057\uffe1\060\uffe1\061\uffe1\062\uffe1\063\uffe1\064" +
    "\uffe1\065\uffe1\066\uffe1\067\uffe1\001\002\000\062\005\uffe2" +
    "\007\uffe2\011\uffe2\012\uffe2\020\uffe2\021\uffe2\025\uffe2\026" +
    "\uffe2\031\uffe2\033\uffe2\052\uffe2\053\uffe2\054\uffe2\055\uffe2" +
    "\056\uffe2\057\uffe2\060\uffe2\061\uffe2\062\uffe2\063\uffe2\064" +
    "\uffe2\065\uffe2\066\uffe2\067\uffe2\001\002\000\006\012\ufff0" +
    "\033\ufff0\001\002\000\036\005\101\007\067\025\062\031" +
    "\103\056\105\057\077\060\072\061\107\062\063\063\100" +
    "\064\074\065\102\066\064\067\071\001\002\000\024\004" +
    "\114\005\112\006\117\022\121\023\113\024\111\027\273" +
    "\030\115\041\120\001\002\000\036\005\101\007\067\025" +
    "\062\031\103\056\105\057\077\060\072\061\107\062\063" +
    "\063\100\064\074\065\102\066\064\067\071\001\002\000" +
    "\024\004\114\005\112\006\117\010\275\022\121\023\113" +
    "\024\111\030\115\041\120\001\002\000\004\044\276\001" +
    "\002\000\062\005\uffeb\007\uffeb\011\uffeb\012\uffeb\020\uffeb" +
    "\021\uffeb\025\uffeb\026\uffeb\031\uffeb\033\uffeb\052\uffeb\053" +
    "\uffeb\054\uffeb\055\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb" +
    "\062\uffeb\063\uffeb\064\uffeb\065\uffeb\066\uffeb\067\uffeb\001" +
    "\002\000\006\010\uffbc\027\300\001\002\000\024\010\uffba" +
    "\013\022\014\021\015\032\036\023\047\030\050\026\051" +
    "\025\061\027\001\002\000\004\010\uffbb\001\002\000\004" +
    "\042\303\001\002\000\006\016\ufff9\061\ufff9\001\002\000" +
    "\026\012\uffbd\013\022\014\021\015\032\032\037\036\023" +
    "\047\030\050\026\051\025\061\027\001\002\000\004\012" +
    "\306\001\002\000\006\002\uffb5\037\013\001\002\000\004" +
    "\002\uffb7\001\002\000\004\011\uffff\001\002\000\004\011" +
    "\312\001\002\000\004\032\313\001\002\000\004\034\314" +
    "\001\002\000\022\013\022\014\021\015\032\036\023\047" +
    "\030\050\026\051\025\061\027\001\002\000\004\016\316" +
    "\001\002\000\004\007\317\001\002\000\004\035\320\001" +
    "\002\000\004\041\321\001\002\000\004\042\322\001\002" +
    "\000\004\061\323\001\002\000\004\010\324\001\002\000" +
    "\004\011\ufffe\001\002\000\004\011\244\001\002\000\004" +
    "\012\ufffd\001\002\000\004\012\330\001\002\000\006\002" +
    "\ufffc\037\ufffc\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\327\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\010\001\001" +
    "\000\002\001\001\000\004\016\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\303" +
    "\013\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\023\013\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\037\013\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\051\013\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\054\013\030\001\001\000\012\003\056\005\074\013\040" +
    "\014\075\001\001\000\002\001\001\000\010\003\056\005" +
    "\267\014\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\255\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\003\056\005\235\014\075" +
    "\001\001\000\004\014\233\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\204\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\172\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\152\001\001\000\004\014" +
    "\151\001\001\000\004\014\150\001\001\000\004\014\147" +
    "\001\001\000\002\001\001\000\004\014\125\001\001\000" +
    "\004\014\124\001\001\000\004\014\122\001\001\000\004" +
    "\014\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\132\014\133\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\135\014\136\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\141\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\145\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\154\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\163\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\166\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\174\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\201\014\133\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\206\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\211\001\001\000\002\001\001" +
    "\000\004\014\213\001\001\000\002\001\001\000\004\014" +
    "\215\001\001\000\002\001\001\000\004\014\217\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\226\001\001\000\004\014\224\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\231\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\240\001\001\000\002" +
    "\001\001\000\010\003\242\004\244\014\075\001\001\000" +
    "\002\001\001\000\010\003\056\005\250\014\075\001\001" +
    "\000\002\001\001\000\010\003\246\004\247\014\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\253\004\254\014\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\257\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\263\001\001\000\002" +
    "\001\001\000\010\003\265\004\266\014\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\271\001\001\000\002\001\001\000\004\014\273\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\300\013\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\304\013\040\001\001\000\002\001\001\000\004\016" +
    "\306\001\001\000\002\001\001\000\004\017\310\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\314\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\324\001\001" +
    "\000\004\004\325\001\001\000\004\021\326\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$mj$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$mj$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$mj$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public PrintWriter out; 
    
    public String programName;

    public void unrecovered_syntax_error(Symbol cur_SymbolValue) {
        report_fatal_error("Fatal syntax error", cur_SymbolValue);
    }
    
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        done_parsing();
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        throw new mjparser.ParseException("Fatal parsing error", 
                                          tok.line, tok.pos);
    }
    
    public void report_error(String message, Object info) {
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        System.err.println("[" + tok.line + "," + tok.pos + "] " 
                               + message + " at " + tok.toString() );
    }
            

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$mj$actions {
  private final mj parser;

  /** Constructor */
  CUP$mj$actions(mj parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$mj$do_action(
    int                        CUP$mj$act_num,
    java_cup.runtime.lr_parser CUP$mj$parser,
    java.util.Stack            CUP$mj$stack,
    int                        CUP$mj$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$mj$result;

      /* select the action based on the action number */
      switch (CUP$mj$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // otherClass ::= 
            {
              LinkedList<IClassDecl> RESULT =null;
		
        LinkedList<IClassDecl> classDecl = new LinkedList<IClassDecl>();
        RESULT = classDecl;     
        
              CUP$mj$result = parser.getSymbolFactory().newSymbol("otherClass",12, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // otherClass ::= CLASS ID EXTENDS ID LBRACE variableDecl methodDecl RBRACE otherClass 
            {
              LinkedList<IClassDecl> RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).right;
		SymbolValue op1 = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-8)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-7)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-7)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-7)).value;
		int parentleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int parentright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		SymbolValue parent = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		LinkedList<VarDecl> var = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int methodsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int methodsright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		LinkedList<MethodDecl> methods = (LinkedList<MethodDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int otherleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int otherright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		LinkedList<IClassDecl> other = (LinkedList<IClassDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        LinkedList<VarDecl> _varDecls = new LinkedList<VarDecl>();
        LinkedList<MethodDecl> _methodDecls = new LinkedList<MethodDecl>();
        if(var!=null){
        _varDecls.addAll(var);
        }
        if(methods!=null){
        _methodDecls.addAll(methods);
        }      
        LinkedList<IClassDecl> classDecl = new LinkedList<IClassDecl>();
        ChildClassDecl classdec = new ChildClassDecl(op1.line,op1.pos,name+"",parent+"",_varDecls,_methodDecls);
        classDecl.add((IClassDecl)classdec);
        if(other!=null){
            classDecl.addAll(other);
        }           
        RESULT = classDecl;     
        
              CUP$mj$result = parser.getSymbolFactory().newSymbol("otherClass",12, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // otherClass ::= CLASS ID LBRACE variableDecl methodDecl RBRACE otherClass 
            {
              LinkedList<IClassDecl> RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue op1 = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		LinkedList<VarDecl> var = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int methodsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int methodsright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		LinkedList<MethodDecl> methods = (LinkedList<MethodDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int otherleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int otherright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		LinkedList<IClassDecl> other = (LinkedList<IClassDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        LinkedList<VarDecl> _varDecls = new LinkedList<VarDecl>();
        LinkedList<MethodDecl> _methodDecls = new LinkedList<MethodDecl>();
        if(var!=null){
        _varDecls.addAll(var);
        }
        if(methods!=null){
        _methodDecls.addAll(methods);
        }
        LinkedList<IClassDecl> classDecl = new LinkedList<IClassDecl>();
        TopClassDecl classdec = new TopClassDecl(op1.line,op1.pos,name+"",_varDecls,_methodDecls);
        classDecl.add((IClassDecl)classdec);
        if(other!=null){
            classDecl.addAll(other);
        }           
        RESULT = classDecl;     
        
              CUP$mj$result = parser.getSymbolFactory().newSymbol("otherClass",12, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // returnStatement ::= 
            {
              IExp RESULT =null;
		
    RESULT = null;

              CUP$mj$result = parser.getSymbolFactory().newSymbol("returnStatement",11, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // returnStatement ::= RETURN expression SEMI 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
    RESULT = a; 

              CUP$mj$result = parser.getSymbolFactory().newSymbol("returnStatement",11, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Paras ::= 
            {
              LinkedList<Formal> RESULT =null;
		
    RESULT = new LinkedList<>();

              CUP$mj$result = parser.getSymbolFactory().newSymbol("Paras",8, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Paras ::= type ID COMMA Paras 
            {
              LinkedList<Formal> RESULT =null;
		int typleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		IType typ = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		LinkedList<Formal> list = (LinkedList<Formal>)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
    Formal para = new Formal(name.line,name.pos,typ,name.lexeme);
    list.add(para);
    RESULT = list;

              CUP$mj$result = parser.getSymbolFactory().newSymbol("Paras",8, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Paras ::= type ID 
            {
              LinkedList<Formal> RESULT =null;
		int typleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IType typ = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
    LinkedList<Formal> ls = new LinkedList<Formal>();
    Formal para = new Formal(name.line,name.pos,typ,name.lexeme);
    ls.add(para);
    RESULT = ls;

              CUP$mj$result = parser.getSymbolFactory().newSymbol("Paras",8, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // methodDecl ::= 
            {
              LinkedList<MethodDecl> RESULT =null;
		
    RESULT = new LinkedList<MethodDecl>();

              CUP$mj$result = parser.getSymbolFactory().newSymbol("methodDecl",5, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // methodDecl ::= PUBLIC type ID LPAREN Paras RPAREN LBRACE variableDecl statement_list returnStatement RBRACE methodDecl 
            {
              LinkedList<MethodDecl> RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-11)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-11)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-11)).value;
		int typleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-10)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-10)).right;
		IType typ = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-10)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-9)).value;
		int paraleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-7)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-7)).right;
		LinkedList<Formal> para = (LinkedList<Formal>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-7)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		LinkedList<VarDecl> var = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		List s = (List)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp rt = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		LinkedList<MethodDecl> list = (LinkedList<MethodDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
            LinkedList<Formal> _para = new LinkedList<Formal>();
            LinkedList<VarDecl> _varDe = new LinkedList<VarDecl>();
            LinkedList<IStatement> stat = new LinkedList<IStatement>();
            _para.addAll(para);
            _varDe.addAll(var);
            stat.addAll(s);
            MethodDecl method = new MethodDecl(op.line,op.pos,typ,name+"",_para,_varDe,stat,rt);
            LinkedList<MethodDecl> methodlist = new LinkedList<MethodDecl>();
            if (list !=null)
                methodlist.addAll(list);
            methodlist.add(method);
            RESULT = methodlist;
        
              CUP$mj$result = parser.getSymbolFactory().newSymbol("methodDecl",5, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-11)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // variableDecl ::= variableDecl type ID SEMI 
            {
              LinkedList<VarDecl> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		LinkedList<VarDecl> list = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int typleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IType typ = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
            //LinkedList<VarDecl> var_list = new LinkedList<VarDecl>();
            VarDecl _var = new VarDecl(name.line,name.pos,typ,name.lexeme);
            list.add(_var);
            RESULT = list;
        
              CUP$mj$result = parser.getSymbolFactory().newSymbol("variableDecl",6, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // variableDecl ::= type ID SEMI 
            {
              LinkedList<VarDecl> RESULT =null;
		int typleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IType typ = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
            LinkedList<VarDecl> var_list = new LinkedList<VarDecl>();
            VarDecl _var = new VarDecl(name.line,name.pos,typ,name.lexeme);
            var_list.add(_var);
            RESULT = var_list;
        
              CUP$mj$result = parser.getSymbolFactory().newSymbol("variableDecl",6, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // subexpression ::= 
            {
              LinkedList<IExp> RESULT =null;
		
    RESULT = new LinkedList<IExp>();


              CUP$mj$result = parser.getSymbolFactory().newSymbol("subexpression",7, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // subexpression ::= LPAREN subexpression RPAREN 
            {
              LinkedList<IExp> RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<IExp> se = (LinkedList<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
    RESULT = se;

              CUP$mj$result = parser.getSymbolFactory().newSymbol("subexpression",7, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // subexpression ::= subexpression COMMA expression 
            {
              LinkedList<IExp> RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		LinkedList<IExp> se = (LinkedList<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp exp = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        se.add(exp);
        RESULT = se;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("subexpression",7, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // subexpression ::= expression 
            {
              LinkedList<IExp> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp exp = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        LinkedList<IExp> a = new LinkedList<IExp>();
        a.add(exp);
        RESULT = a;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("subexpression",7, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression ::= LPAREN expression RPAREN 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = a; 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expression ::= NOT expression 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new NotExp(op.line,op.pos,a); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expression ::= NEW ID LPAREN RPAREN 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		 RESULT = new NewExp(op.line,op.pos,a+""); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expression ::= NEW INT LBRACKET expression RBRACKET 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = new NewArrayExp(op.line,op.pos,new IntType(op.line,op.pos),a); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expression ::= NEW MEGGYCOLOR LBRACKET expression RBRACKET 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = new NewArrayExp(op.line,op.pos,new ColorType(op.line,op.pos),a); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression ::= THIS 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ThisLiteral(op.line,op.pos,op.lexeme,op.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression ::= ID 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IdLiteral(a.line,a.pos,a+""); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression ::= FALSE 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new FalseLiteral(op.line,op.pos,op.lexeme,op.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression ::= TRUE 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new TrueLiteral(op.line,op.pos,op.lexeme,op.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression ::= TONE_LITERAL 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ToneLiteral(a.line,a.pos,a.lexeme,a.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= BUTTON_LITERAL 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ButtonLiteral(a.line,a.pos,a.lexeme,a.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= COLOR_LITERAL 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ColorLiteral(a.line,a.pos,a.lexeme,a.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= INT_LITERAL 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IntLiteral(a.line,a.pos,a.lexeme,a.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= LPAREN BYTE RPAREN expression 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		  RESULT = new ByteCast(op.line,op.pos,a); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= MEGGYCHECKBUTTON LPAREN expression RPAREN 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = new MeggyCheckButton(op.line,op.pos,a); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= MEGGYGETPIXEL LPAREN expression COMMA expression RPAREN 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = new MeggyGetPixel(op.line,op.pos,a,b); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= expression DOT ID LPAREN subexpression RPAREN 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue b = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<IExp> exp = (LinkedList<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = new CallExp(b.line,b.pos,a,b.lexeme,exp); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= expression DOT LENGTH 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new LengthExp(op.line,op.pos,a); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= expression LBRACKET expression RBRACKET 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = new ArrayExp(a.getLine(),a.getPos(),a,b); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= MINUS expression 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new NegExp(op.line,op.pos,a); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= expression TIMES expression 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new MulExp(op.line,op.pos,a,b); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= expression MINUS expression 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new MinusExp(op.line,op.pos,a,b); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= expression PLUS expression 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new PlusExp(op.line,op.pos,a,b); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= expression EQUAL expression 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new EqualExp(op.line,op.pos,a,b); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression ::= expression LT expression 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new LtExp(op.line,op.pos,a,b); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression ::= expression AND expression 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new AndExp(op.line,op.pos,a,b); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= ID LBRACKET expression RBRACKET ASSIGN expression SEMI 
            {
              IStatement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp c = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = new ArrayAssignStatement(op.line,op.pos,new IdLiteral(a.line,a.pos,a+""),b,c); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= ID ASSIGN expression SEMI 
            {
              IStatement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = new AssignStatement(op.line,op.pos,a.lexeme,b); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= WHILE LPAREN expression RPAREN statement 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement s = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new WhileStatement(op.line,op.pos,a,s); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= WHILE LPAREN expression RPAREN block_statement 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		BlockStatement s = (BlockStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new WhileStatement(op.line,op.pos,a,s); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= IF LPAREN expression RPAREN statement 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement s = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IfStatement(op.line,op.pos,a,s,null); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= IF LPAREN expression RPAREN block_statement 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		BlockStatement s = (BlockStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IfStatement(op.line,op.pos,a,s,null); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= IF LPAREN expression RPAREN statement ELSE block_statement 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IStatement s1 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		BlockStatement s2 = (BlockStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IfStatement(op.line,op.pos,a,s1,s2); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= IF LPAREN expression RPAREN block_statement ELSE statement 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		BlockStatement s1 = (BlockStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement s2 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IfStatement(op.line,op.pos,a,s1,s2); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= IF LPAREN expression RPAREN block_statement ELSE block_statement 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		BlockStatement s1 = (BlockStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		BlockStatement s2 = (BlockStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IfStatement(op.line,op.pos,a,s1,s2); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= IF LPAREN expression RPAREN statement ELSE statement 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IStatement s1 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement s2 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IfStatement(op.line,op.pos,a,s1,s2); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= expression DOT ID LPAREN subexpression RPAREN SEMI 
            {
              IStatement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue b = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		LinkedList<IExp> exp = (LinkedList<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		 RESULT = new CallStatement(b.line,b.pos,a,b.lexeme,exp); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= MEGGYDELAY LPAREN expression RPAREN SEMI 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		 RESULT = new MeggyDelay(op.line,op.pos,a); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= MEGGYTONESTART LPAREN expression COMMA expression RPAREN SEMI 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		 RESULT = new MeggyToneStart(op.line,op.pos,a,b); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= MEGGYSETAUXLEDS LPAREN expression RPAREN SEMI 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		 RESULT = new MeggySetAuxLEDs(op.line,op.pos,a); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= MEGGYSETPIXEL LPAREN expression COMMA expression COMMA expression RPAREN SEMI 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp c = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		 RESULT = new MeggySetPixel(op.line,op.pos,a,b,c); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement_list ::= 
            {
              List RESULT =null;
		
    RESULT = new LinkedList<IStatement>();

              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement_list",3, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement_list ::= LBRACE statement_list RBRACE 
            {
              List RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		List sl = (List)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
        RESULT = sl;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement_list",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement_list ::= statement statement_list 
            {
              List RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IStatement s = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		List sl = (List)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        List list = new LinkedList<IStatement>();
        list.add(s);
        list.addAll(sl);
        RESULT = list;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement_list",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type ::= ID 
            {
              IType RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ClassType(op.line,op.pos,op.lexeme); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // type ::= MEGGYTONE 
            {
              IType RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ToneType(op.line,op.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type ::= MEGGYBUTTON 
            {
              IType RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ButtonType(op.line,op.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type ::= MEGGYCOLOR 
            {
              IType RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		  RESULT = new ColorType(op.line,op.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= VOID 
            {
              IType RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new VoidType(op.line,op.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= INT 
            {
              IType RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IntType(op.line,op.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= BYTE 
            {
              IType RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ByteType(op.line,op.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= BOOLEAN 
            {
              IType RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new BoolType(op.line,op.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type ::= INT LBRACKET RBRACKET 
            {
              IType RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		 RESULT = new IntArrayType(op.line,op.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type ::= MEGGYCOLOR LBRACKET RBRACKET 
            {
              IType RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		 RESULT = new ColorArrayType(op.line,op.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // block_statement ::= LBRACE statement_list RBRACE 
            {
              BlockStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
    RESULT = new BlockStatement(op.line,op.pos,list);

              CUP$mj$result = parser.getSymbolFactory().newSymbol("block_statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // main_class ::= CLASS ID NT$0 LBRACE PUBLIC STATIC type MAIN LPAREN STRING LBRACKET RBRACKET ID RPAREN NT$1 block_statement NT$2 RBRACE 
            {
              MainClass RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (MainClass) ((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-16)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-16)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-16)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-10)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-10)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-10)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		SymbolValue param = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		BlockStatement s = (BlockStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		
            
            parser.out.flush();
          
              CUP$mj$result = parser.getSymbolFactory().newSymbol("main_class",4, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-17)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$2 ::= 
            {
              MainClass RESULT =(MainClass) ((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-14)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-14)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-14)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-8)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue param = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		BlockStatement s = (BlockStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;

                //System.out.println("a");
                RESULT = new MainClass(op.line,op.pos,name.lexeme,param.lexeme,s);

          
              CUP$mj$result = parser.getSymbolFactory().newSymbol("NT$2",15, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              MainClass RESULT =(MainClass) ((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-11)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-12)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-12)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-12)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue param = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
 
            //System.out.println("a");
            System.out.println("Generate prolog using avrH.rtl.s");
            InputStream mainPrologue=null;
            BufferedReader reader=null;
            try {
                // The syntax for loading a text resource file 
                // from a jar file here:
                // http://www.rgagnon.com/javadetails/java-0077.html
                mainPrologue 
                    = this.getClass().getClassLoader().getResourceAsStream(
                        "avrH.rtl.s");
                reader = new BufferedReader(new 
                    InputStreamReader(mainPrologue));

                String line = null;
                while ((line = reader.readLine()) != null) {
                  parser.out.println(line);
                }
            } catch ( Exception e2) {
                e2.printStackTrace();
            }
            finally{
                try{
                    if(mainPrologue!=null) mainPrologue.close();
                    if(reader!=null) reader.close();
                }
                catch (IOException e) {
                   e.printStackTrace();
                }
            }
          
              CUP$mj$result = parser.getSymbolFactory().newSymbol("NT$1",14, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              MainClass RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
 java.io.PrintStream sout 
                    = new java.io.PrintStream(
                        new java.io.FileOutputStream(name.lexeme+".java.s"));
                parser.out = new PrintWriter(sout);
                // Check filename is class name, if not exit with error message
                if(!parser.programName.equals(name+".java"))
                {
                    System.out.println("Filename and Classname don not match");
                    System.exit(0);
                }
            
              CUP$mj$result = parser.getSymbolFactory().newSymbol("NT$0",13, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= IMPORT MEGGY SEMI main_class otherClass 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue p = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		MainClass c = (MainClass)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		LinkedList<IClassDecl> a = (LinkedList<IClassDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        LinkedList<IClassDecl> clDecls = new LinkedList<IClassDecl>();
        clDecls.addAll(a);
        //System.out.println("11");
        RESULT = new Program(p.line,p.pos,c,clDecls);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		RESULT = start_val;
              CUP$mj$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$mj$parser.done_parsing();
          return CUP$mj$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

